version: '3.7'
services:
  node:
    deploy:
      mode: global
      restart_policy: 
        condition: on-failure
      resources:
        reservations:
          cpus:   '0.10'
          memory: '16M'
        limits:
          cpus:   '0.10'
          memory: '32M'
    image: prom/node-exporter:v0.18.1
    command: --path.procfs /host/proc --path.sysfs /host/sys
    volumes:
    - /proc:/host/proc:ro
    - /sys:/host/sys:ro
    - /:/rootfs:ro
    - /etc/hostname:/etc/host_hostname:ro
    environment:
    - HOST_HOSTNAME=/etc/host_hostname
    networks:
    - monitoring

  cadvisor:
    deploy:
      mode: global
      labels:
      - label com.docker.stack.namespace=monitoring
      restart_policy: 
        condition: on-failure
      resources:
        reservations:
          cpus:   '0.20'
          memory: '64M'
        limits:
          cpus:   '0.20'
          memory: '256M'
    image: gcr.io/google-containers/cadvisor 
    healthcheck:
      disable: true

    volumes:
    - /:/rootfs:ro
    - /var/run:/var/run:ro
    - /sys:/sys:ro
    - /var/lib/docker:/var/lib/docker:ro
    - /dev/disk:/dev/disk:ro
    networks:
    - monitoring


  alertmanager:
    image: prom/alertmanager:v0.20.0
    deploy:
      mode: replicated
      replicas: 1
      labels:
      - label com.docker.stack.namespace=monitoring
      restart_policy: 
        condition: on-failure
      resources:
        reservations:
          cpus:   '0.10'
          memory: '64M'
        limits:
          cpus:   '0.10'
          memory: '128M'
    networks:
    - monitoring
    ports:
    - "9093:9093"

 
  prometheus:
    image: prom/prometheus:v2.15.2
    command: --config.file=/etc/prometheus.yml --storage.tsdb.path=/prometheus
    deploy:
      mode: replicated
      replicas: 1
      labels:
      - label com.docker.stack.namespace=monitoring
      restart_policy: 
        condition: on-failure
      resources:
        reservations:
          cpus:   '0.10'
          memory: '64M'
        limits:
          cpus:   '0.10'
          memory: '128M'
    networks:
    - monitoring
    ports:
    - "9090:9090"
    configs:
    - source: prometheus-config
      target: /etc/prometheus.yml
    - source: alerting-rules
      target: /etc/prometheus-rules.yml

 
  grafana:
    image: grafana/grafana:master
    #image: basi/grafana:4.6.2
    ports:
      - "3000:3000"
    networks:
      - monitoring
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GF_PASSWORD:-admin}
      PROMETHEUS_ENDPOINT: http://prometheus:9090
    deploy:
      mode: replicated
      replicas: 1
      resources:
        limits:
          cpus: '0.50'
          memory: 64M
        reservations:
          cpus: '0.50'
          memory: 32M
 
  loki:
    image: grafana/loki:master
    ports:
      - "3100:3100"
    command: -config.file=/etc/loki/local-config.yaml
    networks:
      - monitoring

  promtail:
    image: grafana/promtail:master
    deploy:
      mode: global
      resources:
        reservations:
          cpus:   '0.10'
          memory: '16M'
        limits:
          cpus:   '0.10'
          memory: '32M'
    volumes:
      - /var/log:/var/log
      - /var/lib/docker/containers:/var/lib/docker/containers
    command: -config.file=/etc/promtail/docker-config.yaml
    configs:
    - source: promtail-config
      target: /etc/promtail/docker-config.yaml
    networks:
      - monitoring

networks:
  monitoring:
    driver: overlay
    
configs:
  prometheus-config: 
    file: ./prometheus-config.yml
    name: name${VERSION}
  alerting-rules: 
    file: ./prometheus-rules.yml
    name: alerts${VERSION}
  promtail-config:
    file: ./promtail-config.yml
    


